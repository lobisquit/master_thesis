#+STARTUP: latexpreview
#+LATEX_HEADER: \usepackage{mathtools}
#+STARTUP: indent
#+LATEX_HEADER: \usepackage{glossaries}
#+latex_header_extra: \newacronym{pop}{PoP}{Point of Presence}
#+latex_header_extra: \newacronym{dslam}{DSLAM}{Digital Subscriber Line Access Multiplexer}

#+OPTIONS: toc:nil

* ANALOGY Virtual Network Overlay as group of organizers of a fair
- people coming in are packets to be forwarded

- one all-knowing person cannot deal with all their specific needs, so
  - many people deal with simple tasks, redirecting visitors to common destinations
  - difficult (unusual) ones are sent to their supervisor, who knows more things
  - again, unusual requests are sent up to the supervisor of the supervisor, and so on

- the director has to be sure that all staff knows its needed information ~> controller

- a responsible is given the task to check if everybody is working properly (no congestion, no problems) and tell the director in case ~> monitor

* Traffic generation techniques, from "A Survey on the Common Network Traffic Sources Models"
** Bound (envelope) source traffic models
*** Deterministic Bound Interval Independent
Traffic function $A$ is limited by $A*$: $$ A[t,\, t + \tau] \le A^*(\tau) $$: deterministic and time-invariant bound.
cite:ChengShangChang1994

*** Stochastic Bound Traffic Models
Bound is *not* deterministic, but in probability: traffic function is likely to be smaller than the bound.

*** BIND Traffic Model

** Unbound (exact) Source Models

*** Poisson Distribution Model

*** Pareto Distribution Process

*** Markov Modulated Poisson Process

*** Markov Modulated Fluid Models

*** Autoregressive Models

*** Wavelet-based Models

*** Traffic Models Using Chaotic Maps
ex. Piecewise Linear Maps

*** N-Burst Traffic Model
Sum of N independent ON-OFF sources

* TODO thesis [0/6]
- [ ] design the network, based on Aachen population and topology
  - check optimal and heuristic results
  - choose the nicer configuration
  - provide costs and stuff: check if parameters are feasible
- [ ] write a simulator: ns-3 or custom? (at the end we won't be 100% realistic, so ...)
- [ ] design user profiles $f_i(x)$, the $X$ set of quantities plus their limitations
  - cite aggregated statistics, just for fun
- [ ] study what is done in practice now, as a reference
- [ ] study (sub-)optimal solutions given by Nash arbitration scheme
  - find a reasonable set of points $u^*$ to inspect
  - is the solution viable in a changing (but stationary) environment?  ex. bursts
- [ ] run TBF parameters optimization, globally and locally
  - which ML algorithm to use? maybe a streaming time variant approach?
- [ ] giant comparison between state of the art, TBF and optimal scheme

* things I have found
- o'Reilly book on MPLS/SDN: nice overwiev of the protocol cite:Szarkowicz2015
- overwiev on traditional packet generation techniques
- internet flows are not always stationary, gaussian and linear cite:Marnerides2018,Cao2001
- non-stationarity can be modeled using
  - Transformed Arma Models cite:Laner2014
  - time variant Poisson processed cite:Karagiannis2004
  - MFSG, GFSD cite:Anderson2017 (best paper, super recent)

* Aachen network estimation
- city has 200.000 people, spread across 160km2
- each person has (estimated) 40Mb/s in download and 8Mb/s in upload
- a single DSLAM can serve from 100 to 2000 people, with corresponding throughput required

* Fair use of the network
We choose, following cite:Mazumdar1991, to try to find the Nash arbitration
scheme, since users are not free in our context to demand all the network
resources, but are (and have to be) controlled by the provider (arbiter). Goal
of the arbiter is to find then a Pareto optimal point in which "force" the
users.

NOTE other arbitration schemes are equivalent to Nash one are equivalent in our case.


* COMMENT Local variables
# Local Variables:
# eval: (add-hook 'after-save-hook 'org-render-latex-fragments t t)
# End:
