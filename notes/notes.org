#+STARTUP: latexpreview
#+LATEX_HEADER: \usepackage{mathtools}
#+STARTUP: indent
#+LATEX_HEADER: \usepackage{glossaries}
#+latex_header_extra: \newacronym{pop}{PoP}{Point of Presence}
#+latex_header_extra: \newacronym{dslam}{DSLAM}{Digital Subscriber Line Access Multiplexer}

#+OPTIONS: toc:nil

* ANALOGY Virtual Network Overlay as group of organizers of a fair
- people coming in are packets to be forwarded

- one all-knowing person cannot deal with all their specific needs, so
  - many people deal with simple tasks, redirecting visitors to common destinations
  - difficult (unusual) ones are sent to their supervisor, who knows more things
  - again, unusual requests are sent up to the supervisor of the supervisor, and so on

- the director has to be sure that all staff knows its needed information ~> controller

- a responsible is given the task to check if everybody is working properly (no congestion, no problems) and tell the director in case ~> monitor

* Traffic generation techniques, from "A Survey on the Common Network Traffic Sources Models"
** Bound (envelope) source traffic models
*** Deterministic Bound Interval Independent
Traffic function $A$ is limited by $A*$: $$ A[t,\, t + \tau] \le A^*(\tau) $$: deterministic and time-invariant bound.
cite:ChengShangChang1994

*** Stochastic Bound Traffic Models
Bound is *not* deterministic, but in probability: traffic function is likely to be smaller than the bound.

*** BIND Traffic Model

** Unbound (exact) Source Models

*** Poisson Distribution Model

*** Pareto Distribution Process

*** Markov Modulated Poisson Process

*** Markov Modulated Fluid Models

*** Autoregressive Models

*** Wavelet-based Models

*** Traffic Models Using Chaotic Maps
ex. Piecewise Linear Maps

*** N-Burst Traffic Model
Sum of N independent ON-OFF sources

* TODO thesis [0/6]
- [ ] design the network, based on Aachen population and topology
  - check optimal and heuristic results
  - choose the nicer configuration
  - provide costs and stuff: check if parameters are feasible
- [ ] write a simulator: ns-3 or custom? (at the end we won't be 100% realistic, so ...)
- [ ] design user profiles $f_i(x)$, the $X$ set of quantities plus their limitations
  - cite aggregated statistics, just for fun
- [ ] study what is done in practice now, as a reference
- [ ] study (sub-)optimal solutions given by Nash arbitration scheme
  - find a reasonable set of points $u^*$ to inspect
  - is the solution viable in a changing (but stationary) environment?  ex. bursts
- [ ] run TBF parameters optimization, globally and locally
  - which ML algorithm to use? maybe a streaming time variant approach?
- [ ] giant comparison between state of the art, TBF and optimal scheme

* things I have found
- o'Reilly book on MPLS/SDN: nice overwiev of the protocol cite:Szarkowicz2015
- overwiev on traditional packet generation techniques
- internet flows are not always stationary, gaussian and linear cite:Marnerides2018,Cao2001
- non-stationarity can be modeled using
  - Transformed Arma Models cite:Laner2014
  - time variant Poisson processed cite:Karagiannis2004
  - MFSG, GFSD cite:Anderson2017 (best paper, super recent)

* Aachen network estimation
- city has 200.000 people, spread across 160km2
- each person has (estimated) 40Mb/s in download and 8Mb/s in upload
- a single DSLAM can serve from 100 to 2000 people, with corresponding throughput required

* Optimization problem requirements
Previous pre-processing on Aachen city map allowed us to summarize all relevant information in an undirected graph $G=(V, \,E)$.
In our case the streets, described with edges in $E$, connect buildings or street intersections, associated with vertices in $V$.

** General problem
As can be found in literature and field best practices we perform an educated guess on city access network structure and properties.

The network is shaped as a tree, with a single and unique path connecting the customers to the provider [[ac:pop][PoP]] along the internet backbone: each path passes through two kinds of intermediate nodes, first the [[acp:dslam][DSLAM]] and then a second level router whose main task is to aggregate all the traffic further and further.

The access network is considered to be relatively modern, since the infrastructure has been renewed on the past years in conjuction with works on main city roads.
That is the reason why we suppose all main links are fiber optic ones and can serve the customer with the state-of-the-art VDSL/VDSL2, while a fraction of last-mile legacy lines are still copper.
The minor fraction of ADSL users can be correctly described though, in terms of available bandwidth, as VDSL connections at the same distance.

TODO cite something about this numbers (apart from "best practices")
Given these assumptions, each users is expected not to be farther than 1.5Km from the [[ac:dslam][DSLAM]], if VDSL is employed, and 2.5Km in the ADSL case, with the average distance being 250m, 700m respectively.

TODO check most popular DSLAM models
Each [[ac:dslam][DSLAM]] can handle from 12 to 48 VDSL2 ports, one per customer, whose traffic is forwarded to the second level router via two 1Gbps connections.
These [[acp:pop][PoP]] have a much bigger number of ports, namely from 192 to 400, and are connected directly to the main frame, which is made of two or three backbone routers.

** Layered proposed solution
All previously mentioned [[acp:pop][PoP]] are arranged to form a layered tree structure, as in figure TODO.

TODO drawing of multi-layered tree

A first idea would be to find the optimal configuration for this structure, but we moved away from this approach for two main reasons.

First, the resulting mathematical problem is very complex, resulting in long computation times.

Second, the result would be unrealistic, far from the actual design practises.
Apart from the [[acp:dslam][DSLAM]], each network component has to be placed in a suitable location, because of its size and energy consumption.
Moreover the main links are preferred to be put on the main streets, since roadworks are more frequent in this case and manteinance and upgrades of the network are cheaper.

These consideration lead us to envision a layered approach: first all [[acp:dslam][DSLAM]] location is optimally computed across the city and then the major network components are placed guiding the automatic procedure via some heuristics, such as the ones described earlier.

** Placing DSLAMs
In order to ease the mathematical description of the optimization problem, a direct graph $G^\prime = (V^\prime, A)$ is induced on top of if, as follows.

\begin{equation}
  \begin{dcases}
    V^\prime = V \cup \{r\} \\
    A = \left\{ (i,\,j), (j,\,i) ~ \forall \{i, j\} \in E \right\} \cup
        \left\{ (r,\,j) ~ \forall j \in V \right\}
  \end{dcases}
\end{equation}

First each undirected edge in $E$ is doubled with the two corresponding directed arcs.
Then an artificial node $r$ is added and connected to each of the nodes in the original vertex set $V$. This node will be forced to be the root of our network tree, resulting in a convenient constraint formulation.




** Model parameters

Each vertex $j \in V$ is assigned a required bandwidth $b_j$ the access network has to provide it: this allows the solver to discriminate the nodes between buildings and street intersections.

Each arc $(i,\,j) \in A$ is assigned a length, in meters, given by the geographical distance between its endpoints.
Artificial arcs $(r,\,j)$ do not correspond to physical connections and are given length 0.

Our access network has to satisfy two main requirements.

First the bandwidth that can be served by the DSLAMs is limited by $B_M$.
This is an upper limit to the nunber of users each subtree can manage and has to be taken care writing the problem constrants.

On the other hand, in order to guarantee a proper service to the user, DSLAMs have to be close enough to the customers, meaning the distance has to be at most $d_M$.




Limit the number of edges entering a note (root, terminal, tree conditions).

\begin{equation}
  \sum_{e \in \delta^-(j)} x_e ~
  \begin{dcases}
    = 0 & j = r \\
    = 1 & j \in T \\
    \le 1 & \text{otherwise}
  \end{dcases}
\end{equation}

There are no limits for number of outgoing edges for real nodes,
but our artificial node *must* be part of the tree.

\begin{equation}
  \sum_{e \in \delta^+(r)} x_e > 0
\end{equation}

** Objective function

\begin{equation}
  \min
  \sum_{t \in T} d_t \, c_f
  + \sum_{e \in E} x_e \, c_e
  + \sum_{j \in V} r_j \, c_D
\end{equation}

** Distance counter
Set the distance counter $d_j$ to be the distance from the root
of the tree that node $j$ belongs to.

If $j$ has no tree (or it is the root if its tree), set it to zero.

\begin{equation}
  d_j \le \left( \sum_{e \in \delta^-(j)} x_e \right) d_M
\end{equation}

\begin{equation}
  \implies
  \begin{dcases}
    d_j \le 0 & \sum_{e \in \delta^-(j)} x_e = 0 \\
    d_j \le d_M & \sum_{e \in \delta^-(j)} x_e = 1
  \end{dcases}
\end{equation}

Which then combines with domain constraint on the distance.

\begin{equation}
  d_j \ge 0
\end{equation}

If arc is active, make distance counter /effectively/ a counter.

Given previous relationships, distance differences are valued in

\begin{equation}
  d_j - d_i \in [- d_M, d_M]
\end{equation}

These equations fix the distance increment to $l_{ij}$, edge length,
when there is a connection.

\begin{equation}
  d_j - d_i \le l_{ij} + (d_M - l_{ij}) (1 - x_{ij})
\end{equation}

\begin{equation}
  \implies
  \begin{dcases}
    d_j - d_i \le d_M & x_{ij} = 0 \\
    d_j - d_i \le l_{ij} & x_{ij} = 1
  \end{dcases}
\end{equation}

\begin{equation}
  d_j - d_i \ge l_{ij} - \left( d_M + l_{ij} \right) (1 - x_{ij})
\end{equation}

\begin{equation}
  \implies
  \begin{dcases}
    d_j - d_i \ge - d_M & x_{ij} = 0 \\
    d_j - d_i \ge l_{ij} & x_{ij} = 1
  \end{dcases}
\end{equation}

** Terminal reachability
Each building is connected to one of the trees.

\begin{equation}
  \forall t \in T,
  \sum_{e \in \delta^-(t)} x_e = 1
\end{equation}

** Counting terminals per tree
Let $n_e$ the number of users (terminals) served by edge $e$ and $n_M$ the
maximum possible number of user served by each DSLAM.

\begin{equation}
  \forall e \notin \delta^+(r),\, 0 \le n_e \le x_e \, n_M
\end{equation}

$n_e$ value must propagate from terminals to the first level nodes.

$p_i$ is the number of users at terminal $i$: flux is unbalanced only for terminal nodes (and artificial root $r$).

\begin{equation}
  \forall j \neq r, \sum_{e \in \delta^+(j)} n_e = p_i + \sum_{e \in \delta^-(j)} n_e
\end{equation}

* Fair use of the network
We choose, following cite:Mazumdar1991, to try to find the Nash arbitration
scheme, since users are not free in our context to demand all the network
resources, but are (and have to be) controlled by the provider (arbiter). Goal
of the arbiter is to find then a Pareto optimal point in which "force" the
users.

NOTE other arbitration schemes are equivalent to Nash one are equivalent in our case.


* COMMENT Local variables
# Local Variables:
# eval: (add-hook 'after-save-hook 'org-render-latex-fragments t t)
# End:
