Download all needed files from Aachen city repository.

#+NAME: population_density
http://offenedaten.aachen.de/dataset/81650028-ef21-4f1b-a991-9e3a3f01c729/resource/460bfe18-7df4-49fb-b5d0-6dfc1d0cffd5/download/20170630opendataaachen-daten-statistische-bezirkealle.csv

#+NAME: district_map
http://offenedaten.aachen.de/dataset/5ea893af-8f1d-4658-9066-8f05daed1022/resource/6dfc1b81-26d9-4ed8-b8c4-a61013659f51/download/statistischebezirkeaachen.zip

For the roads details, see [[https://simonb83.github.io/making-a-map-in-matplotlib.html][here]].
#+NAME: roads
http://download.geofabrik.de/europe/germany/nordrhein-westfalen-latest-free.shp.zip

#+BEGIN_SRC bash :var population_density=population_density district_map=district_map roads=roads :tangle temp.sh
  mkdir -p data/

  # download
  wget -c $population_density -O data/20170630_population_density_temp.csv
  wget -c $district_map -O data/district_map.zip
  wget -c $roads -O data/roads_map.zip

  # preprocess
  awk -F, '{print $1 "," $3}' data/20170630_population_density_temp.csv > data/20170630_population_density.csv
  rm -f data/20170630_population_density_temp.csv

  unzip -o data/district_map.zip -d data/
  mv data/StatistischeBezirkeAachen.shp data/aachen_district_map.shp
  mv data/StatistischeBezirkeAachen.shx data/aachen_district_map.shx
  mv data/StatistischeBezirkeAachen.dbf data/aachen_district_map.dbf
  mv data/StatistischeBezirkeAachen.prj data/aachen_district_map.prj

  unzip -p data/roads_map.zip gis_osm_roads_free_1.shp > data/aachen_roads_map.shp
  unzip -p data/roads_map.zip gis_osm_roads_free_1.shx > data/aachen_roads_map.shx
  unzip -p data/roads_map.zip gis_osm_roads_free_1.dbf > data/aachen_roads_map.dbf
#+END_SRC

#+RESULTS:
| Archive:   | data/district_map.zip              |
| inflating: | data/StatistischeBezirkeAachen.dbf |
| inflating: | data/StatistischeBezirkeAachen.prj |
| inflating: | data/StatistischeBezirkeAachen.qpj |
| inflating: | data/StatistischeBezirkeAachen.shp |
| inflating: | data/StatistischeBezirkeAachen.shx |

Initialize the datasets, moving everything in the same projection coordinates.
See [[https://gis.stackexchange.com/questions/17341/projection-pyproj-puzzle-and-understanding-srs-format][here]] for getting projection from ~prj~ file.

#+NAME: init_datasets
#+BEGIN_SRC python
  import osr

  from shapely.ops import cascaded_union
  from shapely.geometry.polygon import Polygon
  import geopandas as gpd
  import matplotlib.pyplot as plt
  import pandas as pd
  from pyproj import Proj

  # read district map and its projection details
  district_map = gpd.read_file("data/aachen_district_map.shp")
  del district_map['FLÃ¤cHE'] # whole zero column

  prj_content = open('data/aachen_district_map.prj', 'r').read()
  srs = osr.SpatialReference()
  srs.ImportFromWkt(prj_content)
  projection = srs.ExportToProj4()
#+END_SRC

Extract the union of Aachen metropolitan area, in order to filter roads properly.
#+BEGIN_SRC python :results none :noweb yes
  <<init_datasets>>

  # extract border
  aachen_area = cascaded_union(district_map['geometry'])

  # convert back to (lat, long) for this purpose
  p = Proj(projection)
  latlong = [p(*coord[0:2], inverse=True) for coord in aachen_area.exterior.coords]
  aachen_area = Polygon(latlong)

  with open('data/aachen_border', 'w') as outfile:
      # convert border from 3D to 2D
      outfile.write(aachen_area.buffer(0).to_wkt())
#+END_SRC

~postgresql~ is needed: step to install.
#+NAME: postgres_commands
#+BEGIN_SRC bash :results none
  # run as postgres user
  initdb -D '/var/lib/postgres/data'
  dropdb mapping
  createdb mapping
  psql mapping -c 'CREATE EXTENSION postgis'

  if [ ! -f data/aachen_roads_map.shp ]; then
      echo "This take some time..."
      shp2pgsql -s 4326 data/aachen_roads_map.shp roads | psql mapping > /dev/null
  fi

  # extract roads around aachen border
  read aachen_border < data/aachen_border
  pgsql2shp -f data/extracted_roads -h localhost -u postgres mapping \
            "SELECT osm_id, geom FROM roads
             WHERE ST_Intersects(geom, ST_SetSRID(ST_GeomFromText('$aachen_border'), 4326));"
#+END_SRC


#+BEGIN_SRC python :results none :noweb yes
  <<init_datasets>>

  # read roads map and move it to district projection
  roads_map = gpd.read_file("data/extracted_roads.shp")
  roads_map.crs = {'init': 'epsg:4326'}
  roads_map = roads_map.to_crs(projection)

  district_population = pd.read_csv("data/20170630_population_density.csv")
  district_population.columns = ['STATBEZ', 'PERS']

  # join using index
  district_map.set_index('STATBEZ', inplace=True)
  district_population.set_index('STATBEZ', inplace=True)

  district_map['population'] = district_population['PERS']

  # compute area in km^2: I checked some in wikipedia to be sure
  district_map['area'] = district_map['geometry'].area / 10**6
  district_map['density'] = district_map['population'] / district_map['area']

  fig = plt.figure(frameon=False)
  ax = fig.gca()

  ax.set_title("Population density in Aachen")
  ax.set_label("people / km2")

  district_map.plot(column='density',
                    cmap='summer',
                    legend=True,
                    ax=ax)

  roads_map.plot(color='black', linewidth=0.1, ax=ax)


  plt.axis('off')
  plt.tight_layout()
  plt.show()
#+END_SRC


* Local variables
  # Local Variables:
  # sh-indent-after-continuation: nil
  # org-export-babel-evaluate: nil
  # eval: (add-hook 'before-save-hook (lambda () (indent-region (point-min) (point-max) nil)) t t)
  # End:
