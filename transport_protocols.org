# -*- mode: Org; -*-

#+STARTUP: indent
#+OPTIONS: toc:nil

In order for this protocols to work, each page request has to have

- a request ID unique for the user
- a sequence number P, unique in the session
- a sequence max number L, constant for the session
- routing information (path)
- size
- transmission time, in order to estimate RTT
- a type, for distinguishing between page requests, ACKs, ...

We suppose a on-off user activity process, with exponential off times, 10s mean.

* TCP like protocol
Description of a Go-Back-N ARQ protocol that is similar enough to TCP for our
purposes.

Note that at any time, receiving a request with ID different from the current
one (if any) resets the server to IDLE and the last request is processed.

#+BEGIN_SRC plantuml :file figures/tcp_server_side.png :noweb yes
  <<plantuml_skin>>
  skinparam defaultTextAlignment center
  hide empty description
  state INIT : # set A = -1 \l# set B = 0 \l# estimate RTT based on request packet
  state IDLE #f6ff9b
  state "B < A + N + 1?" as DECIDE
  state "compute Round Trip Time \lof the last ACKed packets" as RECV
  state TRANSMIT : # transmit packet B + 1 \l# set B = B + 1
  state "set B = A" as RETX
  state "P = L?" as CHECK_FINISH
  state "IDLE" as FINISH #f6ff9b
  state "A = max{A, P}" as UPDATE_A

  IDLE -> INIT : Page request \n with window size N

  INIT --> DECIDE

  DECIDE --> WAIT : NO
  DECIDE -left> TRANSMIT : YES

  TRANSMIT -> DECIDE : Timeout of RTT/2
  TRANSMIT -> RECV : ACK(P) received

  RETX --> DECIDE

  WAIT -> RETX : Timeout of t<sub>0</sub>
  WAIT --> RECV : ACK(P) received

  RECV -> CHECK_FINISH

  CHECK_FINISH --> FINISH : YES
  CHECK_FINISH -> UPDATE_A : NO

  UPDATE_A --> DECIDE

  legend
  ,* A is the ID of the last packet known to be received by the user
  ,* B is the ID of the last packet sent by the server
  ,* L is the ID of the last packet of current page request
  ,* ρ is the current (estimated) throughput of the connection
  ,* t<sub>0</sub> is a multiple of the estimated Round Trip Time
  end legend
#+END_SRC

#+RESULTS:
[[file:figures/tcp_server_side.png]]

#+BEGIN_SRC plantuml :file figures/tcp_client_side.png :noweb yes
  <<plantuml_skin>>

  skinparam defaultTextAlignment center
  hide empty description

  state INIT : # Transmit page request\l# Initialize arrived array
  state IDLE #f6ff9b
  state ACK_L as "Send ACK(L)"
  state "# estimate RTT on last packets\l# set arrived(P) = True\l# set K=argmin{arrived(i)=False}" as RECV
  state "Send ACK(K)" as SEND_ACK
  state "K = L?" as CHECK_FINISH
  state "IDLE" as FINISH #f6ff9b
  state "Evaluate QoE" as JUDGE

  IDLE --> INIT : User requests a page
  IDLE -> ACK_L : Packet P of L arrives

  ACK_L -> IDLE : \n

  INIT -> INIT : Timeout of t<sub>0</sub>
  INIT --> RECV : Packet P of L arrives

  RECV -> SEND_ACK

  SEND_ACK --> CHECK_FINISH

  WAIT --> RECV : \nPacket P of L arrives
  WAIT -> SEND_ACK : Timeout of RTT\n

  CHECK_FINISH --> JUDGE : YES
  CHECK_FINISH --> WAIT : NO

  JUDGE --> FINISH

  legend
  ,* t<sub>0</sub> is a multiple of the supposed Round Trip Time of the connection
  ,* each data packet contains its ID, P, and the ID of the last one, L
  end legend

#+END_SRC

#+RESULTS:
[[file:figures/tcp_client_side.png]]

* UDP like protocol
Simply send packets with serial number from the server at requested quality
(bitrate). Client side, just compute jitter, throughput and packet losses in a
certain time window based on what arrives: packet losses are easy to calculate
based on serial numbers.

#+BEGIN_SRC plantuml :file figures/udp_client_side.png :noweb yes
    <<plantuml_skin>>
    hide empty description

    state IDLE #f6ff9b

    state REQUEST {
      state REQUEST_INIT : # Pick unique session number for the stream\n# Setup unusability timeout
      state REQUEST_WAIT : Send DATA request to server
    }
    state "DATA       " as DATA {
      state DATA_INIT : # Clear all previous timeouts \n# Setup unusability timeout
      state DATA_WAIT : Update stream metrics
    }
    state UNUSABLE : Mark service as unusable
    state STOP_WAIT : Send STOP request to server
    state "IDLE" as FINISH #f6ff9b
    state EVALUATE : Compute QoS, QoE based on metrics

    IDLE --> REQUEST_INIT : User requests \nsome content

    REQUEST_INIT --> REQUEST_WAIT

    REQUEST_WAIT --> REQUEST_WAIT : t<sub>0</sub>
    REQUEST --> UNUSABLE : N × t<sub>0</sub>

    REQUEST_WAIT --> DATA_INIT : DATA packet received
  DATA_INIT --> DATA_WAIT
    DATA_WAIT --> DATA_WAIT : DATA packet received
    DATA --> UNUSABLE : N × t<sub>0</sub>
    DATA_WAIT -> EVALUATE : FINISH packet received

    ' DATA_WAIT --> STOP_WAIT : User cancels \nits request
    ' REQUEST_WAIT --> STOP_WAIT : User cancels \nits request

    UNUSABLE --> STOP_WAIT

    STOP_WAIT --> STOP_WAIT : t<sub>0</sub>

    STOP_WAIT --> EVALUATE : FINISH packet received

    EVALUATE --> FINISH

    IDLE --> STOP_WAIT : DATA packet received
#+END_SRC

#+RESULTS:
[[file:figures/udp_client_side.png]]


#+BEGIN_SRC plantuml :file figures/udp_server_side.png :noweb yes
  <<plantuml_skin>>
  hide empty description

  state IDLE #f6ff9b
  state INIT : Track request session number
  state DATA_SEND: Send DATA packet to the user
  state "Has the stream ended?" as STREAM_ENDED

  state FINISH_SEND : Send FINISH packet to the user
  state "IDLE" as FINISH  #f6ff9b

  IDLE --> FINISH_SEND : STOP packet received

  IDLE --> INIT : DATA request received     \n
  INIT --> DATA_SEND
  DATA_SEND --> STREAM_ENDED : \n

  STREAM_ENDED --> DATA_SEND : NO
  STREAM_ENDED --> FINISH_SEND : YES

  DATA_SEND --> FINISH_SEND : STOP packet received

  FINISH_SEND --> FINISH
#+END_SRC

#+RESULTS:
[[file:figures/udp_server_side.png]]

* COMMENT Local variables
# Local Variables:
# org-confirm-babel-evaluate: nil
# eval: (add-hook 'org-babel-pre-tangle-hook (lambda () (org-babel-lob-ingest "thesis/thesis.org")) t t)
# eval:  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
# End:
