* Retrieve datasets
  Download all needed files from Aachen city repository.

  #+NAME: population_density
  http://offenedaten.aachen.de/dataset/81650028-ef21-4f1b-a991-9e3a3f01c729/resource/460bfe18-7df4-49fb-b5d0-6dfc1d0cffd5/download/20170630opendataaachen-daten-statistische-bezirkealle.csv

  #+NAME: district_map
  http://offenedaten.aachen.de/dataset/5ea893af-8f1d-4658-9066-8f05daed1022/resource/6dfc1b81-26d9-4ed8-b8c4-a61013659f51/download/statistischebezirkeaachen.zip

  For the roads details, see [[https://simonb83.github.io/making-a-map-in-matplotlib.html][here]].
  #+NAME: roads
  http://download.geofabrik.de/europe/germany/nordrhein-westfalen-latest-free.shp.zip

  #+BEGIN_SRC bash :var population_density=population_density district_map=district_map roads=roads :results none :tangle scripts/citymap/1_download.sh
    mkdir -p data/citymap/

    # download
    wget -c $population_density -O data/citymap/20170630_population_density_temp.csv
    wget -c $district_map -O data/citymap/district_map.zip
    wget -c $roads -O data/citymap/roads_map.zip

    # preprocess
    awk -F, '{print $1 "," $3}' data/citymap/20170630_population_density_temp.csv > data/citymap/20170630_population_density.csv
    rm -f data/citymap/20170630_population_density_temp.csv

    unzip -o data/citymap/district_map.zip -d data/citymap/
    mv data/citymap/StatistischeBezirkeAachen.shp data/citymap/aachen_district_map.shp
    mv data/citymap/StatistischeBezirkeAachen.shx data/citymap/aachen_district_map.shx
    mv data/citymap/StatistischeBezirkeAachen.dbf data/citymap/aachen_district_map.dbf
    mv data/citymap/StatistischeBezirkeAachen.prj data/citymap/aachen_district_map.prj

    unzip -p data/citymap/roads_map.zip gis_osm_roads_free_1.shp > data/citymap/aachen_roads_map.shp
    unzip -p data/citymap/roads_map.zip gis_osm_roads_free_1.shx > data/citymap/aachen_roads_map.shx
    unzip -p data/citymap/roads_map.zip gis_osm_roads_free_1.dbf > data/citymap/aachen_roads_map.dbf
  #+END_SRC

  Initialize the datasets, moving everything in the same projection coordinates.
  See [[https://gis.stackexchange.com/questions/17341/projection-pyproj-puzzle-and-understanding-srs-format][here]] for getting projection from ~prj~ file.

  #+NAME: init_datasets
  #+BEGIN_SRC python :results none
    import geopandas as gpd
    import matplotlib.pyplot as plt
    import osr
    import pandas as pd
    from matplotlib import rcParams
    from pyproj import Proj
    from shapely.geometry.polygon import Polygon
    from shapely.ops import cascaded_union

    # read district map and its projection details
    district_map = gpd.read_file("data/citymap/aachen_district_map.shp")
    del district_map['FLäcHE'] # whole zero column

    # copy-pasta code
    prj_content = open('data/citymap/aachen_district_map.prj', 'r').read()
    srs = osr.SpatialReference()
    srs.ImportFromWkt(prj_content)
    projection = Proj(srs.ExportToProj4())
  #+END_SRC

* Create city map
  Extract the union of Aachen metropolitan area, in order to filter roads properly.
  See [[https://simonb83.github.io/making-a-map-in-matplotlib.html][here]] for details.

  #+BEGIN_SRC python :results none :noweb yes :tangle scripts/citymap/2_city_border.py
    <<init_datasets>>

    with open('data/citymap/aachen_border', 'w') as outfile:
        # extract border
        aachen_area = cascaded_union(district_map['geometry'])

        # convert back to (lat, long) for this purpose
        aachen_area = Polygon([projection(*coord[0:2], inverse=True) \
                               for coord in aachen_area.exterior.coords])

        # convert border from 3D to 2D
        outfile.write(aachen_area.to_wkt())
  #+END_SRC

  ~postgresql~ database is needed: give following commands as ~postgres~ user.
  ~postgis~ extension is needed, as in following commands.

  #+BEGIN_SRC bash :results none :tangle scripts/citymap/3_postgres_init.sh
    initdb -D '/var/lib/postgres/data'
    dropdb mapping
    createdb mapping
    psql mapping -c 'CREATE EXTENSION postgis'

    echo "This take some time..."
    shp2pgsql -s 4326 data/citymap/aachen_roads_map.shp roads | psql mapping > /dev/null
  #+END_SRC

  Create output ~shp~ as normal user.

  #+BEGIN_SRC bash :results output :tangle scripts/citymap/4_extraction.sh
    # extract roads around aachen border
    read aachen_border < data/citymap/aachen_border
    pgsql2shp -f data/citymap/extracted_roads -h localhost -u postgres mapping \
              "SELECT osm_id, geom FROM roads
               WHERE fclass NOT IN ('trunk_link', 'bridleway', 'motorway',
                                    'motorway_link', 'path', 'primary_link',
                                    'secondary_link', 'service', 'steps',
                                    'tertiary_link', 'track', 'track_grade2',
                                    'track_grade3', 'track_grade4', 'track_grade5',
                                    'unclassified', 'unknown')
               AND ST_Intersects(geom, ST_SetSRID(ST_GeomFromText('$aachen_border'), 4326));"
  #+END_SRC

  Create final plot, with roads as well as population density.

  #+BEGIN_SRC python :results none :noweb yes :tangle scripts/citymap/5_plot_map.py
    <<init_datasets>>

    font_spec = {
        'font.family':'sans-serif',
        'font.sans-serif':['Fira Sans'],
        'font.weight': 'regular'
    }
    rcParams.update(font_spec)

    # read roads map and move it to district projection
    roads_map = gpd.read_file("data/citymap/extracted_roads.shp")
    roads_map.crs = {'init': 'epsg:4326'}
    roads_map = roads_map.to_crs(projection.srs)

    district_population = pd.read_csv("data/citymap/20170630_population_density.csv")
    district_population.columns = ['STATBEZ', 'PERS']

    # join using index
    district_map.set_index('STATBEZ', inplace=True)
    district_population.set_index('STATBEZ', inplace=True)

    district_map['population'] = district_population['PERS']

    # compute area in km^2: I checked some in wikipedia to be sure
    district_map['area'] = district_map['geometry'].area / 10**6
    district_map['density'] = district_map['population'] / district_map['area']

    fig = plt.figure(figsize=(6, 6), frameon=False)
    ax = fig.gca()

    ax.set_title("Population density in Aachen\n",
                 fontsize=15,
                 fontweight=font_spec['font.weight'])

    district_map.plot(column='density',
                      cmap='autumn_r',
                      legend=True,
                      linewidth=0, # remove districts borders
                      alpha=0.8,
                      ax=ax)

    roads_map.plot(color='black', linewidth=0.15, ax=ax)

    # set title of colorbar (dirty trick)
    fig.get_axes()[1].set_title('  people/km²', fontweight=font_spec['font.weight'])

    plt.axis('off')
    plt.tight_layout(rect=[-1.25, -0.04, 1.2, 1])
    plt.savefig('figures/citymap.pdf')

    plt.close('all')

  #+END_SRC

* Create graph from city roads
  See [[https://github.com/caesar0301/s2g][here]] for details.

  #+BEGIN_SRC python :noweb yes :tangle scripts/citymap/6_roads_graph.py
    <<init_datasets>>

    import json
    from math import sqrt

    import fiona
    import networkx as nx
    from networkx.readwrite import json_graph
    from s2g import ShapeGraph
    from shapely.geometry import LineString, shape

    # path = 'data/citymap/extracted_roads.shp'
    path = '/home/enrico/Scaricati/gis_osm_roads_free_1.shp' # test path

    sg = ShapeGraph(shapefile=path, to_graph=True)

    # convert graph to json
    G = json_graph.node_link_data(sg.graph)

    for node in G['nodes']:
        node['lat'], node['long'] = sg.node_xy[node['id']]

    with open('data/citymap/connected_roads.json', 'w') as output:
        output.write(json.dumps(G))
  #+END_SRC

* Local variables
  # Local Variables:
  # sh-indent-after-continuation: nil
  # org-export-babel-evaluate: nil
  # eval: (add-hook 'before-save-hook (lambda () (indent-region (point-min) (point-max) nil)) t t)
  # End:
