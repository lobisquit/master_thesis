#+STARTUP: latexpreview
#+STARTUP: indent

#+PROPERTY: header-args :cache yes

#+OPTIONS: toc:nil title:nil

#+LaTeX_CLASS: book
#+LATEX_HEADER: \usepackage{charter}
#+LATEX_HEADER: \usepackage{subcaption}
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \usepackage{etoolbox}
#+LATEX_HEADER: \usepackage{multirow}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \graphicspath{{../figures/}}
#+LATEX_HEADER: \usepackage{mathtools}
#+LaTeX_HEADER: \usepackage{booktabs}
#+LaTeX_HEADER: \usepackage{amsmath}
#+LaTeX_HEADER: \def\equationautorefname#1#2\null{(#2\null)}
#+LATEX_HEADER: \providetoggle{images_titlepage}
#+LATEX_HEADER: \settoggle{images_titlepage}{true}

#+LaTeX_HEADER: \setlength{\parindent}{0cm}
#+LATEX_HEADER: \setlength{\parskip}{0.2em}

#+LATEX_HEADER: \usepackage{glossaries}
#+LATEX_HEADER_EXTRA: \newacronym{pop}{PoP}{Point of Presence}
#+LATEX_HEADER_EXTRA: \newacronym{dslam}{DSLAM}{Digital Subscriber Line Access Multiplexer}
#+latex_header_extra: \newacronym{qos}{QoS}{Quality of Service}
#+latex_header_extra: \newacronym{ilp}{ILP}{Integer Linear Programming}

#+BEGIN_COMMENT
PlantUML skin, reusable for all diagrams
#+END_COMMENT

#+NAME: plantuml_skin
#+BEGIN_SRC plantuml :exports none
  skinparam shadowing false
  skinparam padding 1
  skinparam BoxPadding 1
  skinparam DefaultFontName Fira Sans
  skinparam defaultTextAlignment center

  skinparam SequenceDelayFontSize 15

  skinparam Note {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }

  skinparam Activity {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }

  skinparam activityDiamond {
  BackgroundColor white
  BorderColor black
  FontColor       black
  }

  skinparam ArrowColor black

  skinparam State {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }

  skinparam SequenceParticipant {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }

  skinparam Interface {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }

  skinparam SequenceLifeLine {
  BorderColor black
  BackgroundColor black
  }

  skinparam Queue {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }

  skinparam Usecase {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }
#+END_SRC

#+BEGIN_COMMENT
Download all needed files for titlepage and convert them.
LaTeX support for svg files sucks.
#+END_COMMENT

#+BEGIN_SRC bash :exports none :results none
  wget https://upload.wikimedia.org/wikipedia/it/5/53/Logo_Universit%C3%A0_Padova.svg \
       -O ../figures/logo_unipd.svg

  inkscape ../figures/logo_unipd.svg --export-pdf=../figures/logo_unipd.pdf

  wget https://upload.wikimedia.org/wikipedia/commons/1/11/RWTH_Logo.svg \
       -O ../figures/logo_rwth.svg

  inkscape ../figures/logo_rwth.svg --export-pdf=../figures/logo_rwth.pdf
#+END_SRC

#+BEGIN_EXPORT latex
\newgeometry{top=1in, bottom=1in, inner=1in, outer=1in}

\begin{titlepage}
  {\Large University of Padova}
  \vspace{5mm}

  {\Large Department of Information Engineering}

  \begin{center}
    \vspace{1cm}
    {\Large \textsl{Master degree in Telecommunication Engineering}} \\
    \vspace{1cm}
    {\scshape\huge Traffic flow optimization \\[0.3em] for urban xDSL based access networks }

    \iftoggle{images_titlepage}{
      \vspace{1cm}
      \begin{figure}[h]
        \centering
        \includegraphics[height=5cm]{logo_unipd.pdf}
        \vspace{1cm} \\
        \includegraphics[height=2cm]{logo_rwth.pdf}
        \vspace{1cm}
      \end{figure}
    }

  \end{center}

  \vfill
  \hspace{0.5cm}%
  \renewcommand{\arraystretch}{2.5}
  \begin{tabular}{lr}
    \large \textsl{Author}               & \hspace{5mm} \large Enrico Lovisotto      \\
    \large \textsl{Internal supervisor}  & \hspace{5mm} \large Prof. Andrea Zanella  \\
    \large \textsl{External supervisors} & \hspace{5mm} \large Prof. Petri Mähönen  \\
                                         & \hspace{5mm} \large Dr. Ljiljana Simić   \\
  \end{tabular}
  \vspace{1cm}

  \hfill{\large February 6, 2019} \vspace{3mm}

  \hfill{\Large Academic year 2018-2019 \par}
\end{titlepage}

\restoregeometry
#+END_EXPORT

* Introduction
#+BEGIN_SRC org :exports none
  + background: what are we talking about?
    - SDN => self-optimizing networks
    - flow balancing (TBF)
    - routing adaptation

  + what they do now?
    - summary of state of the art, /basically/

  + shortcomings in current knowledge / solutions
    - limits of SDN over traditional networks: lack of negative results
    - use of abstract topologies ~> this one is obtained through optimization process

  + what are we gonna prove?
    - 99% if the networks are very simple, meant to be more flow aggregators and less clever routers
    - SDN are not inherently good: /probably/ traditional solutions are good in 99% of the networks
    - SDN are relevant when the complexity of the network grows
#+END_SRC
* State of the art

* Methodology
In order to optimize the network, we need a schematic of it => educated guess

** Geographical analysis
#+BEGIN_SRC org :exports none
  OpenStreetMap ~> roads + buildings graph: only methodological consideration

  + cutting NRW maps with Aachen border
  + selecting roads & buildings type
  + ~s2g~ to obtain the graph ~> cite stuff using this approach
    - road polygons to edges
    - intersections as nodes
  + adding building to the graph
    - splitting roads
    - population estimated based on district population, building area
#+END_SRC

Unfortunately, schematics for Aachen access network are not publicly avaiable,
so we have to perform what it is called an /educated guess/, meaning a good
estimation based on avaiable information.

This evaluation will be performed using OpenStreetMap cite:OpenStreetMap in
conjuction with the /Open Data Portal/ of the city of Aachen [fn:1]: the former
provides buildings and roads positions, while the latter describes how
population is distributed across the city districts.

[fn:1: Please refer to http://daten.aachen.de for further information and licensing.]

This information can be visualized in the map in [[autoref:fig:aachen_city_graph]].

#+LABEL: fig:aachen_city_graph
#+CAPTION: Summary of all Aachen district information we will employ: building, roads positions and population distribution.
#+RESULTS[ea0d941863a2f88dda8d4c477b78e3c1fdef18bc]: fig:network_tree
[[file:../figures/aachen_citymap.png]]

Due to the level of detail of these datasets, two assumptions are needed in
order to extract a reasonable diagram for the access city network.

First, we suppose cables to be put along streets and not to cross (even public)
terrains. This is common practice in contexts like ours, since all the roadwork
the city is frequently under is exploited to perform manteinance and build new
parts of the network.

Second, we consider the population of a given area to be distributed across a
fraction of its buildings, so-called /residential/ ones, uniformly picked across
all the constructions. \\
We have to take this strong hypothesis because of the level of details the
OpenStreetMap dataset provides: information about the building use and its
height is lacking in most entries.

I consider these two suppositions acceptable, since we want to analyze how the
access network of a city like Aachen behaves, not to replicate it in its
details.

This information is then condensed in an abstract graph, whose edges are the
streets and vertices are the road crossing. The former were given the
corresponding lane length, while the latter were assigned the supposed number of
people living in the surrounding area.

#+LABEL: fig:aachen_city_graph
#+CAPTION: City topology is converted into an abstract graph.
[[file:~/Archivi/tesi/figures/aachen_city_graph.png]]

** Network design
#+BEGIN_SRC org :exports none
  Using ILP to build the network

  - network requirements
    + ISP recommendations
    + best practices (CISCO, ...)
  - actual solution we are trying to find
    + optimal DSLAM positioning
    + optimal + heuristic check for routers and mainframe positions (restrict root nodes?)
  - why ILP? how does it work? (brief)
  - problem definition
    + idea for the model: Steiner tree + other constraints (cite requirements)
    + actual equations
  - problem complexity: number of variables, constraints (in theory)
#+END_SRC

Previous pre-processing on Aachen city map allowed us to summarize in an
undirected graph $G=(V, \,E)$ all relevant information about the streets
topology, buildings and estimated number of users.

As specified earlier, each node $i$ is assigned a number of users $u_i$ to serve
and, since that they represent a physical line, edges are given instead a length
value $l_e$: both these parameters will be used later to evaluate the access
network cost.

In this chapter we will exploit this information to find the optimal network
configuration, given some assumptions and requirements derived from best
practices in access network design.

TODO cite CISCO

*** Topology considerations
As depicted in autoref:fig:network_tree we suppose our access network to be made of
layer-2 type switches and to be logically shaped as a tree.

This seemingly strong assumption is confirmed to be common practice in such
access networks, where more complex and elaborate topologies are too expensive
and offer no substantial benefit.

In this configuration the path from users to the provider mainframe is fixed and
must cross two kinds of intermediate nodes, a [[acp:dslam][DSLAM]] and a router, whose main
task is to aggregate all the traffic further and further.

#+BEGIN_SRC plantuml :file ../figures/network_tree.eps :noweb yes
  <<plantuml_skin>>
  skinparam nodesep 10

  left to right direction

  queue Backbone as b

  rectangle Mainframe as m #ff9b9b

  rectangle Router as r1 #ffda9b
  rectangle Router as r2 #ffda9b
  rectangle Router as r3 #ffda9b

  rectangle DSLAM as d1 #f6ff9b
  rectangle DSLAM as d2 #f6ff9b
  rectangle DSLAM as d3 #f6ff9b
  rectangle DSLAM as d4 #f6ff9b
  rectangle DSLAM as d5 #f6ff9b
  rectangle DSLAM as d6 #f6ff9b

  interface " " as c1
  interface " " as c2
  interface " " as c3
  interface " " as c4
  interface " " as c5
  interface " " as c6
  interface " " as c7
  interface " " as c8
  interface " " as c9
  interface " " as c10
  interface " " as c11
  interface " " as c12
  interface " " as c13
  interface " " as c14
  interface " " as c15
  interface " " as c16
  interface " " as c17
  interface " " as c18

  b -- m

  m -- r1
  m -- r2
  m -- r3

  r1 -- d1
  r1 -- d2
  r2 -- d3
  r2 -- d4
  r3 -- d5
  r3 -- d6

  d1 -- c1
  d1 -- c2
  d1 -- c3
  d2 -- c4
  d2 -- c5
  d2 -- c6
  d3 -- c7
  d3 -- c8
  d3 -- c9
  d4 -- c10
  d4 -- c11
  d4 -- c12
  d5 -- c13
  d5 -- c14
  d5 -- c15
  d6 -- c16
  d6 -- c17
  d6 -- c18

  r1 -[hidden] r2
  r2 -[hidden] r3

  d1 -[hidden] d2
  d2 -[hidden] d3
  d3 -[hidden] d4
  d4 -[hidden] d5
  d5 -[hidden] d6

  c1 -[hidden] c2
  c2 -[hidden] c3
  c3 -[hidden] c4
  c4 -[hidden] c5
  c5 -[hidden] c6
  c6 -[hidden] c7
  c7 -[hidden] c8
  c8 -[hidden] c9
  c9 -[hidden] c10
  c10 -[hidden] c11
  c11 -[hidden] c12
  c12 -[hidden] c13
  c13 -[hidden] c14
  c14 -[hidden] c15
  c15 -[hidden] c16
  c16 -[hidden] c17
  c17 -[hidden] c18
#+END_SRC

#+LABEL: fig:network_tree
#+CAPTION: A layered tree access network connects users (circles) to the Internet backbone
#+ATTR_LATEX: :height 3.5in
#+RESULTS[d2aed76d599a21954d5c3ff79a5030fd90a959fd]:
[[file:../figures/network_tree.eps]]

From a technological point of view the network is considered to be relatively
modern, since the infrastructure has been renewed on the past years in
conjuction with works on main city roads.

That is the reason why we suppose all main links to be fiber optic ones and to
be able to serve the customer with the state-of-the-art VDSL/VDSL2. The minor
fraction of legacy ADSL and copper-cable users can be well approximated as VDSL
connections at the same distance, in terms of bandwidth and other network
metrics.

In order to guarantee a suitable [[ac:qos][QoS]], all connected network components have to
be close enough to each other: this is taken into account though a maximum
distance parameter $d_M$.

Finally, to make the tree a plausible topology each switch is allowed to serve a
limited number $n_M$ of lower level nodes, given by the number of physical ports
of the device.

*** Solution approach
In smaller context, an handmade network design is often good enough to meet all
needed conditions and to be reasonably cheap. \\
This is not our case, since the set of possible topologies is far too vast for a
manual inspection and evaluation: a programmatic strategy is then necessary to
proceed.

Problems on graphs similar to the one we face are often solved using either [[ac:ilp][ILP]]
or an heuristic approach. TODO cite \\
The former is a powerful mathematical tool that finds the best possible solution
to the problem, but it is very computational resources and time demanding. \\
The latter instead does not strive to give the optimal configuration, but can
achieve possibly good results in a more reasonable amount of time.

My first attempt involved writing the mathematical model to describe the
multi-layered system as a whole, but it was immediately clear that it would have
been to complex, as the solver can handle a limited amount of variables and
constraints.

To overcome this issue I moved to a different way of designing the topology.
Instead of positioning all the nodes at once, the solver would place the leaves
of the tree, meaning the [[acs:dslam][DSLAMs]], first and then move up to the higher-level
elements. \\
This is closer to what is done in practice, as each step is examined and
evaluated according to criteria, such as soundness and future-proofing of the
infrastructure, that are difficult to explain to the solver.

The network topology moves then from the one in [[autoref:fig:network_tree]] to the
simplified setting of autoref:fig:network_tree_simplified.

#+BEGIN_SRC plantuml :file ../figures/network_tree_simplified.eps :noweb yes
  <<plantuml_skin>>
  skinparam nodesep 10

  queue Backbone as b

  rectangle Root as r #ff9b9b

  rectangle DSLAM as d1 #f6ff9b
  rectangle DSLAM as d2 #f6ff9b
  rectangle DSLAM as d3 #f6ff9b
  rectangle DSLAM as d4 #f6ff9b
  rectangle DSLAM as d5 #f6ff9b
  rectangle DSLAM as d6 #f6ff9b

  interface " " as c1
  interface " " as c2
  interface " " as c3
  interface " " as c4
  interface " " as c5
  interface " " as c6
  interface " " as c7
  interface " " as c8
  interface " " as c9
  interface " " as c10
  interface " " as c11
  interface " " as c12
  interface " " as c13
  interface " " as c14
  interface " " as c15
  interface " " as c16
  interface " " as c17
  interface " " as c18

  b -- r

  r -[dashed]- d1
  r -[dashed]- d2
  r -[dashed]- d3
  r -[dashed]- d4
  r -[dashed]- d5
  r -[dashed]- d6

  d1 -- c1
  d1 -- c2
  d1 -- c3
  d2 -- c4
  d2 -- c5
  d2 -- c6
  d3 -- c7
  d3 -- c8
  d3 -- c9
  d4 -- c10
  d4 -- c11
  d4 -- c12
  d5 -- c13
  d5 -- c14
  d5 -- c15
  d6 -- c16
  d6 -- c17
  d6 -- c18

  d1 -[hidden] d2
  d2 -[hidden] d3
  d3 -[hidden] d4
  d4 -[hidden] d5
  d5 -[hidden] d6

  c1 -[hidden] c2
  c2 -[hidden] c3
  c3 -[hidden] c4
  c4 -[hidden] c5
  c5 -[hidden] c6
  c6 -[hidden] c7
  c7 -[hidden] c8
  c8 -[hidden] c9
  c9 -[hidden] c10
  c10 -[hidden] c11
  c11 -[hidden] c12
  c12 -[hidden] c13
  c13 -[hidden] c14
  c14 -[hidden] c15
  c15 -[hidden] c16
  c16 -[hidden] c17
  c17 -[hidden] c18
#+END_SRC

#+LABEL: fig:network_tree_simplified
#+CAPTION: The second-level-routers are all condensed into the mainframe root in the first iteration.
#+ATTR_LATEX: :height 3.5in
#+RESULTS[57895584675366485538bd7127a6d511605cf424]: fig:network_tree_simplified
[[file:../figures/network_tree_simplified.eps]]

As apparent in the diagram the solver must now take into consideration the cost
of the nodes that have been omitted from the tree. This is accounted as a lump
sum for the connection of each aggregating network entity, called from now on
/sub-root/, to the mainframe both in terms of cables and intermediate nodes.

Both the exact and approximated approach that will be discussed later will
consider a topology built in this fashion, starting from the periphery and
moving towards the core of the network.

All relevant parameters have been collected in [[autoref:quantities_constraints]] and
will be taken for granted in the following sections.

#+NAME: quantities_constraints
#+CAPTION: Problem parameters, divided in topology specific ones, technological limits and costs.
#+ATTR_LATEX: :align cl
| Variable        | Description                                                   |
|-----------------+---------------------------------------------------------------|
| $G = (V, \, E)$ | Graph describing the city topology                            |
| $T \subseteq V$ | Set of terminal nodes                                         |
| $l_e = l_{ij}$  | Length of edge $e = (i,\,j) \in E$                            |
| $u_i$           | Number of users at terminal $i \in T$                         |
|-----------------+---------------------------------------------------------------|
| $d_M$           | Maximum distance from a terminal and its root                 |
| $n_M$           | Maximum number of terminals per tree                          |
|-----------------+---------------------------------------------------------------|
| $c_r$           | Cost of a single subtree root node, plus mainframe connection |
| $c_f$           | Cost of a fiber optic cable per meter                         |
| $c_e$           | Cost of roadwork excavation per meter                         |

*** Mathematical formulation
Many constraints and requirements have to be taken into consideration in order to
design the access network correctly, both from the point of view of costs and
technological limits: all their relevant parameters are listed in
autoref:quantities_constraints.

In order to express the optimization problem in a convenient way, we arrange our
data as follows.

A direct graph $G^\prime = (V \cup \{r\},\, A)$ is induced on top of the $G$, where
the set of arcs $A$ is defined as follows.

#+NAME: induction_G
\begin{equation}
  A = \left\{ (i,\,j),\, (j,\,i) ~~ \forall \{i, j\} \in E \right\} \cup
  \left\{ (r,\,j) ~ \forall j \in V \right\}
\end{equation}

First each undirected edge in $E$ is doubled with the two corresponding directed
arcs; then an artificial node $r$ is added to the vertices set and connected to
each of the nodes in $V$.

Each arc $(i,\,j) \in A$ is assigned a length, in meters $l_{ij}$, given by the
geographical distance between its endpoints. Artificial arcs $(r,\,j)$ do not
correspond to physical connections and so $l_{rj} = 0 ~~ \forall j \in V$.

With this setup our network access configuration will simply be a direct tree, or
/arborescence/, with root in $r$, as depicted in autoref:fig:tree_network.

#+BEGIN_SRC plantuml :file ../figures/ilp_graph_reduced.eps :noweb yes
  <<plantuml_skin>>
  skinparam nodesep 10

  skinparam ArrowFontSize 25
  skinparam UsecaseFontSize 25
  hide empty description

  usecase "r" as r #ff9b9b

  usecase " " as d1 #f6ff9b
  usecase " " as d2 #f6ff9b
  usecase " " as d3 #f6ff9b
  usecase " " as d4 #f6ff9b
  usecase " " as d5 #f6ff9b
  usecase "i" as d6 #f6ff9b

  usecase " " as c1
  usecase " " as c2
  usecase " " as c3
  usecase " " as c4
  usecase " " as c5
  usecase " " as c6
  usecase " " as c7
  usecase " " as c8
  usecase " " as c9
  usecase " " as c10
  usecase " " as c11
  usecase " " as c12
  usecase " " as c13
  usecase " " as c14
  usecase " " as c15
  usecase " " as c16
  usecase " " as c17
  usecase " " as c18

  usecase " " as n1
  usecase " " as n2
  usecase " " as n3
  usecase " " as n4
  usecase " " as n5
  usecase " " as n6
  usecase " " as n7
  usecase " " as n8
  usecase " " as n9
  usecase " " as n10
  usecase " " as n11
  usecase " " as n12
  usecase " " as n13
  usecase " " as n14
  usecase " " as n15
  usecase " " as n16
  usecase " " as n17
  usecase " " as n18
  usecase " " as n19
  usecase " " as n20
  usecase " " as n21
  usecase " " as n22
  usecase " " as n23
  usecase " " as n24

  r -[#ff5050]->> d1
  r -[#ff5050]->> d2
  r -[#ff5050]->> d3
  r -[#ff5050]->> d4
  r -[#ff5050]->> d5
  r -[#ff5050]->> d6 : "(r, i)"

  d1 -->> c1
  d1 -->> c2
  d1 -->> c3
  d2 -->> c4
  d2 -->> c5
  d2 -->> c6
  d3 -->> c7
  d3 -->> c8
  d3 -->> c9
  d4 -->> c10
  d4 -->> c11
  d4 -->> c12
  d5 -->> c13
  d5 -->> c14
  d5 -->> c15
  d6 -->> c16
  d6 -->> c17
  d6 -->> c18

  c1  -->> n1
  c1  -->> n2
  c2  -->> n3
  c3  -->> n4
  c4  -->> n5
  c5  -->> n6
  c5  -->> n7
  c6  -->> n8
  c7  -->> n9
  c8 -->> n10
  c8 -->> n11
  c8 -->> n12
  c9 -->> n13
  c9 -->> n14
  c10 -->> n15
  c11 -->> n16
  c11 -->> n17
  c12 -->> n18
  c14 -->> n19
  c15 -->> n20
  c15 -->> n21
  c16 -->> n22
  c18 -->> n23
  c18 -->> n24

  d1 -[hidden] d2
  d2 -[hidden] d3
  d3 -[hidden] d4
  d4 -[hidden] d5
  d5 -[hidden] d6

  c1 -[hidden] c2
  c2 -[hidden] c3
  c3 -[hidden] c4
  c4 -[hidden] c5
  c5 -[hidden] c6
  c6 -[hidden] c7
  c7 -[hidden] c8
  c8 -[hidden] c9
  c9 -[hidden] c10
  c10 -[hidden] c11
  c11 -[hidden] c12
  c12 -[hidden] c13
  c13 -[hidden] c14
  c14 -[hidden] c15
  c15 -[hidden] c16
  c16 -[hidden] c17
  c17 -[hidden] c18
#+END_SRC

#+LABEL: fig:tree_network
#+CAPTION: In the final solution, additional arcs $(r,\, i)$ connect artifical node $r$ to all the roots, making the whole structure an arborescence, instead of a forest.
#+ATTR_LATEX: :width \linewidth
#+RESULTS[fe1eb5e3a44dd6ff6e0ccc2d64f3d36dd92b1d62]:
[[file:../figures/ilp_graph_reduced.eps]]

As customary in this type of optimization problems, the optimal solution will
eventually be returned by the solver as the sequence of indicator variables
$\{ x_e \}_{e \in A}$ where $x_e$ is equal to 1 only if the arc $e$ has been selected.

Because of the system requirements we also have to keep track of the distance
$d_i$ of each node $i \in V \cup \{r\}$ from its root and the number of users $n_e$ served
by each link in $A$, ensuring they don't exceed their limits.

# To make notation clearer, we define the functions $\delta^+, \, \delta^-: V
# \rightarrow \mathbb{P}(A)$ associating each node with the out-going and in-going
# edges respectively.

# \begin{equation}
#   \begin{split}
#     \delta^+(j) &= \left\{ (j,\,k) \in A \right\} \\
#     \delta^-(j) &= \left\{ (i,\,j) \in A \right\} \\
#   \end{split}
# \end{equation}

\bigbreak
Given this setup, our optimization problem can be written as

\begin{align}
  \text{minimize ~~}
  & \left( \sum_{t \in T} d_t \, u_t \right) \, c_c
    + \left( \sum_{e \in E} x_e \, l_e \right) \, c_e
    + \left( \sum_{e \in \delta^+(r)} x_e \right) \, c_r
    \label{eq:obj_function} \\[0.8em]
  \text{subject to ~~}
  & \sum_{e \in \delta^-(j)} x_e ~
    \begin{dcases}
      = 0 & j = r \\
      = 1 & j \in T \\
      \le 1 & j \in V \setminus T
    \end{dcases} \label{eq:single_arc_in} \\[0.5em]%
    % & \forall j \in V, \sum_{e \in \delta^+(j)} x_e
    % \le \left( \sum_{e \in \delta^-(j)} x_e \right)
    % \, \max_{v \in V} \left| \delta^+(v) \right|
    % \label{eq:nodes_reachability} \\[0.5em]
  & \sum_{e \in \delta^+(r)} x_e \ge 1
    \label{eq:r_active} \\[0.5em]
  & \forall j \in V \cup \{r\}, ~ d_j \le \left( \sum_{e \in \delta^-(j)} x_e \right) d_M
    \label{eq:distance_upper_limit} \\[0.2em]
  & \forall (i,\,j) \in A ~
    \begin{dcases}
      ~ d_j - d_i \ge l_{ij} ~ x_{ij} - d_M \, (1 - x_{ij}) \\[0.2em]
      ~ d_j - d_i \le l_{ij} ~ x_{ij} + d_M \, (1 - x_{ij})
    \end{dcases}
  \label{eq:distance_progression} \\[1.5em]
  & \forall e \in A,\, n_e \le x_e \, n_M
    \label{eq:n_terminals_upper_limit} \\
  & \sum_{e \in \delta^-(j)} n_e - \sum_{e \in \delta^+(j)} n_e =
    \begin{dcases}
      ~ p_j & j \in T \\[0.2em]
      ~ 0 & j \in V \setminus T
    \end{dcases} \label{eq:n_flow_balance} \\[0.5em]
  & \sum_{e \in \delta^+(r)} n_e = \sum_{i \in T} u_i
    \label{eq:root_sink} \\[0.8em]
  & \forall e \in A, \, x_e \in \{0, \, 1\}, \, n_e \in \mathbb{N} \cup \{0\}
    \label{eq:var_domain_1} \\[0.5em]
  & \forall j \in V \cup \{r\}, \, d_j \ge 0
    \label{eq:var_domain_2}
\end{align}

The problem is set to minimize the objective function autoref:eq:obj_function
that sums up the cost of copper and optical fiber lines, the roadworks cost for
installing them and the total price of the root nodes unit.

The first constraint autoref:eq:single_arc_in forces the terminals to be connected
to our network and sets the number of in-going arcs to be at most one, which is a
necessary condition for the network to be a directed tree.

After the leaves are set to be part of the network, $r$ has to be as well by
autoref:eq:r_active. Specifically it will be the root node, as by construction
of $G^\prime$ it has no in-going arcs.

The next equations deal with the variables $d_j$, distance from the tree root.
First, in autoref:eq:distance_upper_limit this quantity is limited by $d_M$ if
the node is reached by the network, otherwise it is set to zero. \\
On the other hand autoref:eq:distance_progression guarantees the consistency of
this metric between two connected nodes, forcing target node distance to be the
source one plus the link length. \\
Implicitly the latter prevents the resulting network to have loops, necessary
for our solution to be a proper arborescence.

The last needed metric for limiting the possible solutions is the number of
users each link can handle, $n_M$. \\
First, this upper limit for $n_e$ is set in autoref:eq:n_terminals_upper_limit
such that it has to hold only for active edges, and then the count of the users
from leaves to each sub-root is performed in autoref:eq:n_flow_balance, which
has the same form as a flow-conservation clause. \\
All such flows must converge towards the root $r$ for autoref:eq:root_sink: this
forces the network to be connected, finally giving it the wanted shape.

Variable domains are eventually specified in autoref:eq:var_domain_1 and
autoref:eq:var_domain_2.

*** Heuristic algorithm
** Flow balancing optimization
TODO using machine learning to control TBFs

* Results
** Geographical analysis
+ maps details (whatever): maps only here?
+ graph details
  - number of nodes (building & others)
  - number of edges
  - degree distribution
  - average node distance, population
  - ... anything basically ...

** Network design
ILP results

- CPLEX performance on the problem
  + computational time
  + number of branches
  + (ask Massimo in case)
- show found solution for network
  + analyze performance of found solution (bandwidth, ...)
  + consideration on actual used heuristics

* Conclusion

bibliographystyle:plain
bibliography:biblio.bib

* COMMENT Local variables
# Local Variables:
# org-latex-tables-booktabs: t
# eval: (add-hook 'after-save-hook 'org-render-latex-fragments t t)
# End:
