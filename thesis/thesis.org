#+STARTUP: latexpreview
#+STARTUP: indent

#+PROPERTY: header-args :cache yes

#+OPTIONS: toc:nil title:nil

#+LaTeX_CLASS: book
#+LATEX_HEADER: \setlength{\parindent}{0pt}
#+LATEX_HEADER: \usepackage{charter}
#+LATEX_HEADER: \usepackage{subcaption}
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \usepackage{etoolbox}
#+LATEX_HEADER: \usepackage{multirow}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \graphicspath{{../figures/}}
#+LATEX_HEADER: \usepackage{mathtools}

#+LATEX_HEADER: \providetoggle{images_titlepage}
#+LATEX_HEADER: \settoggle{images_titlepage}{true}

#+LATEX_HEADER: \usepackage{glossaries}
#+LATEX_HEADER_EXTRA: \newacronym{pop}{PoP}{Point of Presence}
#+LATEX_HEADER_EXTRA: \newacronym{dslam}{DSLAM}{Digital Subscriber Line Access Multiplexer}

#+NAME: plantuml_skin
#+BEGIN_SRC plantuml :exports none
  skinparam shadowing false
  skinparam padding 1
  skinparam BoxPadding 1
  skinparam DefaultFontName Fira Sans
  skinparam defaultTextAlignment center

  skinparam SequenceDelayFontSize 15

  skinparam Note {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }

  skinparam Activity {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }

  skinparam activityDiamond {
  BackgroundColor white
  BorderColor black
  FontColor       black
  }

  skinparam ArrowColor black

  skinparam State {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }

  skinparam SequenceParticipant {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }

  skinparam Interface {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }

  skinparam SequenceLifeLine {
  BorderColor black
  BackgroundColor black
  }

  skinparam Queue {
  BackgroundColor white
  BorderColor     black
  FontColor       black
  }
#+END_SRC

#+BEGIN_COMMENT
Download all needed files for titlepage and convert them.
LaTeX support for svg files sucks.
#+END_COMMENT

#+BEGIN_SRC bash :exports none :results none
  wget https://upload.wikimedia.org/wikipedia/it/5/53/Logo_Universit%C3%A0_Padova.svg \
       -O ../figures/logo_unipd.svg

  inkscape ../figures/logo_unipd.svg --export-pdf=../figures/logo_unipd.pdf

  wget https://upload.wikimedia.org/wikipedia/commons/1/11/RWTH_Logo.svg \
       -O ../figures/logo_rwth.svg

  inkscape ../figures/logo_rwth.svg --export-pdf=../figures/logo_rwth.pdf
#+END_SRC

#+BEGIN_EXPORT latex
\newgeometry{top=1in, bottom=1in, inner=1in, outer=1in}

\begin{titlepage}
  {\Large University of Padova}
  \vspace{5mm}

  {\Large Department of Information Engineering}

  \begin{center}
    \vspace{1cm}
    {\Large \textsl{Master degree in Telecommunication Engineering}} \\
    \vspace{1cm}
    {\scshape\huge TODO: Title}

    \iftoggle{images_titlepage}{
      \vspace{1cm}
      \begin{figure}[h]
        \centering
        \includegraphics[height=5cm]{logo_unipd.pdf}
        \vspace{1cm} \\
        \includegraphics[height=2cm]{logo_rwth.pdf}
        \vspace{1cm}
      \end{figure}
    }

  \end{center}

  \vfill
  \hspace{0.5cm}%
  \renewcommand{\arraystretch}{2.5}
  \begin{tabular}{lr}
    \large \textsl{Author}               & \hspace{5mm} \large Enrico Lovisotto      \\
    \large \textsl{Internal supervisor}  & \hspace{5mm} \large Prof. Andrea Zanella  \\
    \large \textsl{External supervisors} & \hspace{5mm} \large Prof. Petri Mähönen  \\
                                         & \hspace{5mm} \large Dr. Ljiljana Simić   \\
  \end{tabular}
  \vspace{1cm}

  \hfill{\large February 6, 2019} \vspace{3mm}

  \hfill{\Large Academic year 2018-2019 \par}
\end{titlepage}

\restoregeometry
#+END_EXPORT

* Introduction
#+BEGIN_SRC org :exports none
+ background: what are we talking about?
  - SDN => self-optimizing networks
  - flow balancing (TBF)
  - routing adaptation

+ what they do now?
  - summary of state of the art, /basically/

+ shortcomings in current knowledge / solutions
  - limits of SDN over traditional networks: lack of negative results
  - use of abstract topologies ~> this one is obtained through optimization process

+ what are we gonna prove?
  - 99% if the networks are very simple, meant to be more flow aggregators and less clever routers
  - SDN are not inherently good: /probably/ traditional solutions are good in 99% of the networks
  - SDN are relevant when the complexity of the network grows
#+END_SRC
* State of the art

* Methodology
In order to optimize the network, we need a schematic of it => educated guess

** Geographical analysis
#+BEGIN_SRC org :exports none
  OpenStreetMap ~> roads + buildings graph: only methodological consideration

  + cutting NRW maps with Aachen border
  + selecting roads & buildings type
  + ~s2g~ to obtain the graph ~> cite stuff using this approach
    - road polygons to edges
    - intersections as nodes
  + adding building to the graph
    - splitting roads
    - population estimated based on district population, building area
#+END_SRC
** Network design
#+BEGIN_SRC org :exports none
  Using ILP to build the network

  - network requirements
    + ISP recommendations
    + best practices (CISCO, ...)
  - actual solution we are trying to find
    + optimal DSLAM positioning
    + optimal + heuristic check for routers and mainframe positions (restrict root nodes?)

  - why ILP? how does it work? (brief)
  - problem definition
    + idea for the model: Steiner tree + other constraints (cite requirements)
    + actual equations
  - problem complexity: number of variables, constraints (in theory)
#+END_SRC

Previous pre-processing on Aachen city map allowed us to summarize in an undirected graph $G=(V, \,E)$ all relevant information about the streets topology, buildings and estimated number of users.

As specified earlier, each node $i$ is assigned a number of users $u_i$ to serve, which is zero if the node is just a street intersection.
Given that they represent a physical line, edges are given instead a length value $l_e$, that will be used later to evaluate the access network building cost.

In this chapter we will exploit this information to find the optimal network configuration, given some assumptions and requirements derived from best practices in access network design.

TODO cite CISCO

The network is shaped as a tree, with a single and path from the customers to the provider [[ac:pop][PoP]], which is directly connected to the internet backbone.

#+BEGIN_SRC plantuml :file ../figures/layers_diagram.eps :noweb yes
  <<plantuml_skin>>
  skinparam nodesep 10

  left to right direction

  queue Backbone as b

  rectangle Mainframe as m #ff9b9b

  rectangle Router as r1 #ffda9b
  rectangle Router as r2 #ffda9b
  rectangle Router as r3 #ffda9b

  rectangle DSLAM as d1 #f6ff9b
  rectangle DSLAM as d2 #f6ff9b
  rectangle DSLAM as d3 #f6ff9b
  rectangle DSLAM as d4 #f6ff9b
  rectangle DSLAM as d5 #f6ff9b
  rectangle DSLAM as d6 #f6ff9b

  interface " " as c1
  interface " " as c2
  interface " " as c3
  interface " " as c4
  interface " " as c5
  interface " " as c6
  interface " " as c7
  interface " " as c8
  interface " " as c9
  interface " " as c10
  interface " " as c11
  interface " " as c12
  interface " " as c13
  interface " " as c14
  interface " " as c15
  interface " " as c16
  interface " " as c17
  interface " " as c18

  b -- m

  m -- r1
  m -- r2
  m -- r3

  r1 -- d1
  r1 -- d2
  r2 -- d3
  r2 -- d4
  r3 -- d5
  r3 -- d6

  d1 -- c1
  d1 -- c2
  d1 -- c3
  d2 -- c4
  d2 -- c5
  d2 -- c6
  d3 -- c7
  d3 -- c8
  d3 -- c9
  d4 -- c10
  d4 -- c11
  d4 -- c12
  d5 -- c13
  d5 -- c14
  d5 -- c15
  d6 -- c16
  d6 -- c17
  d6 -- c18

  r1 -[hidden] r2
  r2 -[hidden] r3

  d1 -[hidden] d2
  d2 -[hidden] d3
  d3 -[hidden] d4
  d4 -[hidden] d5
  d5 -[hidden] d6

  c1 -[hidden] c2
  c2 -[hidden] c3
  c3 -[hidden] c4
  c4 -[hidden] c5
  c5 -[hidden] c6
  c6 -[hidden] c7
  c7 -[hidden] c8
  c8 -[hidden] c9
  c9 -[hidden] c10
  c10 -[hidden] c11
  c11 -[hidden] c12
  c12 -[hidden] c13
  c13 -[hidden] c14
  c14 -[hidden] c15
  c15 -[hidden] c16
  c16 -[hidden] c17
  c17 -[hidden] c18
#+END_SRC

#+LABEL: fig:stack_diagram
#+CAPTION: A tree access network connects users (circles) to the Internet backbone
#+ATTR_LATEX: :height 3.5in
#+RESULTS[273dc4462f9de8b168511e461fcac2bc4b7dc898]:
[[file:../figures/layers_diagram.eps]]

Each path passes through two kinds of intermediate nodes, first the [[acp:dslam][DSLAM]] and then a second level router whose main task is to aggregate all the traffic further and further.

The access network is considered to be relatively modern, since the infrastructure has been renewed on the past years in conjuction with works on main city roads.
That is the reason why we suppose all main links are fiber optic ones and can serve the customer with the state-of-the-art VDSL/VDSL2, while a fraction of last-mile legacy lines are still copper.
The minor fraction of ADSL users can be correctly described though, in terms of available bandwidth, as VDSL connections at the same distance.

Given these assumptions, each users is expected not to be farther than 1.5Km from the [[ac:dslam][DSLAM]], if VDSL is employed, and 2.5Km in the ADSL case, with the average distance being 250m, 700m respectively.

TODO check most popular DSLAM models
Each [[ac:dslam][DSLAM]] can handle from 12 to 48 VDSL2 ports, one per customer, whose traffic is forwarded to the second level router via two 1Gbps connections.
These [[acp:pop][PoP]] have a much bigger number of ports, namely from 192 to 400, and are connected directly to the mainframe, which is made of two or three backbone routers.

** Flow balancing optimization
TODO using machine learning to control TBFs

* Results
** Geographical analysis
+ maps details (whatever): maps only here?
+ graph details
  - number of nodes (building & others)
  - number of edges
  - degree distribution
  - average node distance, population
  - ... anything basically ...

** Network design
ILP results

- CPLEX performance on the problem
  + computational time
  + number of branches
  + (ask Massimo in case)
- show found solution for network
  + analyze performance of found solution (bandwidth, ...)
  + consideration on actual used heuristics

* COMMENT Local variables
# Local Variables:
# eval: (add-hook 'after-save-hook 'org-render-latex-fragments t t)
# End:
